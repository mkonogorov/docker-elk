version: '3.8'

services:
    traefik:
      image: ${IMAGE_TRAEFIK}
      container_name: ${APP}_traefik
      restart: always
      security_opt:
        - no-new-privileges:true
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.traefik.entrypoints=https"
        - "traefik.http.routers.traefik.rule=Host(`${TRAEFIK_DOMAIN}`)"
        - "traefik.http.routers.traefik.tls=true"
        - "traefik.http.routers.traefik.tls.certresolver=letsEncrypt"
        - "traefik.http.routers.traefik.service=api@internal"
        - "traefik.http.routers.traefik.middlewares=traefik-auth"
        - "traefik.http.services.traefik-traefik.loadbalancer.server.port=888"
        - "traefik.http.middlewares.traefik-auth.basicauth.users=admin:$$apr1$$A1rHw/yS$$tPBoVHzso7Bj2RF6O/CDr."
        - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
        # global redirect to https
        - "traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)"
        - "traefik.http.routers.http-catchall.entrypoints=http"
        - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      ports:
        - 8080:80
        - 4443:443
      volumes:
        - /etc/localtime:/etc/localtime:ro
        - /var/run/docker.sock:/var/run/docker.sock:ro
        - ./data/traefik.yml:/traefik.yml:ro
        - ./data/acme.json:/acme.json
      networks:
        - elk


services:
  elasticsearch:
    build:
      context: elasticsearch/
      args:
        ELK_VERSION: $ELK_VERSION
    container_name: elk
    restart: always
    labels:
        - "traefik.enable=true"
        - "traefik.http.routers.elk.entrypoints=https"
        - "traefik.http.routers.elk.rule=Host(`${ELK_DOMAIN}`)"
        - "traefik.http.routers.elk.tls=true"
        - "traefik.http.routers.elk.tls.certresolver=letsEncrypt"
        - "traefik.http.services.elk-service.loadbalancer.server.port=80"
        - "traefik.docker.network=elk"
    volumes:
      - type: bind
        source: ./elasticsearch/config/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      - type: volume
        source: elasticsearch
        target: /usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_PASSWORD: changeme
      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
      # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
    networks:
      - elk

  logstash:
    build:
      context: logstash/
      args:
        ELK_VERSION: $ELK_VERSION
    container_name: log
    restart: always
    volumes:
      - type: bind
        source: ./logstash/config/logstash.yml
        target: /usr/share/logstash/config/logstash.yml
        read_only: true
      - type: bind
        source: ./logstash/pipeline
        target: /usr/share/logstash/pipeline
        read_only: true
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - elk
    depends_on:
      - elasticsearch

  kibana:
    build:
      context: kibana/
      args:
        ELK_VERSION: $ELK_VERSION
    container_name: kib
    restart: always
    volumes:
      - type: bind
        source: ./kibana/config/kibana.yml
        target: /usr/share/kibana/config/kibana.yml
        read_only: true
    ports:
      - "5601:5601"
    networks:
      - elk
    depends_on:
      - elasticsearch


networks:
  elk:
    driver: bridge

volumes:
  elasticsearch:
